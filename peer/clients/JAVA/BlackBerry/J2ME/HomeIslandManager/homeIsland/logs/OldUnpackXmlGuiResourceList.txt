/*
    public boolean UnpackXmlGuiResourceList() 
    {
        boolean unpacked = false;
        KXmlParser parser = null;
        String xmlContent = (String)this.guiResourceList.get(new Integer(islandApplicationResource.XML_GUI_RESOURCE_LIST));
        Hashtable values = null;
        String name = "";
        String value = "";
        

        try
        {

            //This part grabs and loads the XML file
            ByteArrayInputStream is = new ByteArrayInputStream(xmlContent.getBytes());            
            parser = new KXmlParser();
            parser.setInput(is,null);

            //Document doc = docb.parse(is);
            org.kxml2.kdom.Document doc = new org.kxml2.kdom.Document();
            doc.parse(parser);
            parser = null;

            //NodeList nl = doc.getElementsByTagName("Resources");
            //Grab the Resources Element

            Element el = doc.getRootElement();

            if(this.debug) 
            {
              System.out.println("[INFO] node childCount:"+el.getChildCount());
            }

            
            //Iterate through Icon, Images and Audio elements here
            String globalHashName = "";

            for(int i=0; i<el.getChildCount(); i++)
            {
                globalHashName = "Icon";
                values = null;

                if(el.getChild(i) instanceof Element)
                {

                    Element ce = (Element) el.getChild(i);

                    if(this.debug)
                    {
                        System.out.println("Name:"+ce.getName());
                    }

                    if(ce.getName().length()>0)
                    {
                        name = ce.getName();
                    }

                    if(ce.getChildCount()>0)
                    {

                        for(int j=0; j<ce.getChildCount();j++)
                        {
                            if(ce.getChild(j) instanceof java.lang.String)
                            {
                                if(this.debug)
                                {
                                    System.out.println("Element Value:"+ce.getChild(j));
                                }

                                //This only works for the Icon element...
                                if(((String)ce.getChild(j)).length()>0)
                                {
                                    value = (String)ce.getChild(j);
                                }
                            }

                            if(ce.getChild(j) instanceof Element)
                            {

                                Element cce = (Element) ce.getChild(j);

                                if(this.debug)
                                {
                                    System.out.println("Next Element Name:"+cce.getName());
                                }

                                //We create a new hashtable for each iteration
                                values = new Hashtable();

                                //First we need to grab our main Image Location
                                values.put("URL",cce.getChild(0).toString());

                                if(this.debug)
                                {
                                    System.out.println("Added URL:" + cce.getChild(0).toString() + " to values Hashtable.");
                                }

                                // check attributes
                                if(cce.getAttributeCount()>0)
                                {

                                    for(int q=0; q < cce.getAttributeCount(); q++)
                                    {
                                        if(this.debug)
                                        {

                                            System.out.println("Attribute Name:"+cce.getAttributeName(q).toString());
                                            System.out.println("Attribute Value:"+cce.getAttributeValue(q).toString());
                                        }

                                        if(cce.getAttributeValue(q) != null && cce.getAttributeValue(q).length() > 0 && cce.getAttributeValue(q).toString() != "" && cce.getAttributeValue(q).toString() != "null")
                                        {                                        

                                            values.put(cce.getAttributeName(q).toString(),cce.getAttributeValue(q).toString());

                                            if(cce.getAttributeName(q).equals("Type"))
                                            {
                                                //We need to determine our global label:
                                                if(cce.getAttributeValue(q).equals("PNG"))
                                                {
                                                    globalHashName = "PngImages";
                                                }
                                                else if(cce.getAttributeValue(q).equals("BMP"))
                                                {
                                                    globalHashName = "BmpImages";
                                                }
                                                else if(cce.getAttributeValue(q).equals("AIFF"))
                                                {
                                                    globalHashName = "Audio";
                                                }
                                                else if(cce.getAttributeValue(q).equals("JPG"))
                                                {
                                                    globalHashName = "Images";
                                                }
                                                else if(cce.getAttributeValue(q).equals("GIF"))
                                                {
                                                    globalHashName = "Images";
                                                }
                                                else if(cce.getAttributeValue(q).equals("TIFF"))
                                                {
                                                    globalHashName = "Images";
                                                }
                                                else if(cce.getAttributeValue(q).equals("JPEG"))
                                                {
                                                    globalHashName = "Images";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if(values == null) // no attributes
                {

                    if(this.debug)
                    {
                        System.out.println("Adding " + globalHashName + " and value: " + value + " to the guiResourceList.");
                    }

                    if(value!=null)
                    {

                        if(value.length()>0 && value.trim() != "\n")
                        {
                            this.guiResourceList.put(globalHashName,value);
                        }
                    }
                }
                else
                {
                    if(this.debug)
                    {
                        System.out.println("Adding " + globalHashName + " and hashtable to the guiResourceList.");
                    }

                    this.guiResourceList.put(globalHashName,values);
                }    
            }
        }
        catch(Exception ex)
        {
            if(this.debug)
            {
                System.out.println("[ERROR] problems unpacking xml Resource List:"+ex.toString());
                ex.printStackTrace();
            }
        }

        if(guiResourceList.size()>0)
        {
            unpacked = true;
        }

        return unpacked;
    }
    */
##################################################################################
#                                                                                #
#   This file contains an entry for each property that you can include in        #     
#   dfc.properties.  Related entries appear in groups.                           #     
#                                                                                #     
#                                                                                #     
#   Each entry begins with a block of comments (introduced by #) describing      #     
#   the entry.  A single line (not introduced by #) at the end of the block      #     
#   provides a sample of the entry.  You can copy and paste the sample into      #     
#   dfc.properties.  The sample consists of the property name followed by an     #     
#   equal sign (=).  In some cases, a value follows the equal sign. If so,       #     
#   this is the default value.                                                   #
#                                                                                #     
#   Do not insert spaces around the equal sign.                                  #     
#                                                                                #     
#   You can place an actual value after the equal sign, or you can include an    #     
#   expression that represents a Java system property or another property in     #     
#   the properties file.  The expression takes the form ${...} where the name    #     
#   of the Java system property appears within the parentheses.  For example,    #     
#   if you specify                                                               #     
#                                                                                #     
#       dfc.checkout.dir=${dfc.user.dir}/checkout                                #     
#                                                                                #     
#   DFC substitutes the value of the dfc.user.dir property for ${dfc.user.dir}   #     
#   at runtime.                                                                  #
#                                                                                #
#   Any text you insert for the property value must comply with the ISO 8859-1   #
#   encoding.  Use a Unicode escape sequence of the form \uxxxx for characters   #
#   that you cannot represent directly in ISO 8859-1.                            #
#                                                                                #
#   For property values that are file paths, use either a slash (/) or an        #
#   escaped backslash (\\) for the separator.  All file paths must be            #
#   absolute.  This applies both to file paths specified directly and to paths   #
#   computed at runtime from an expression containing ${...}.                    #
#                                                                                #
#   For entries that take boolean values, DFC ignores case and accepts any of    #
#   the following representations of the boolean values: T/F, On/Off, or         #
#   True/False.                                                                  #
#                                                                                #
#   For more information, refer to the Sun Javadocs for the                      #
#   java.util.Properties class.                                                  #
#                                                                                #
##################################################################################



# Business Object Framework
# =========================

# You can configure the way DFC interacts with the global registry.  The 
# entries that have samples with nothing after the equal sign have no 
# default values but are mandatory for systems using a global registry.  
# 
# For the other entries, if you do not include them in dfc.properties, DFC 
# assumes the values that appear after the equal signs in the samples below.  
# 
# Refer to the BOF chapter of the DFC Development Guide for more information 
# about BOF and the global registry.  


# Name of the repository containing the the global registry. The
# repository must project to a connection broker that DFC has access to.
#
dfc.bof.registry.repository=


# Username and password that DFC should use to access the global 
# registry. 
#
# You can provide the password in plain text or encrypted
# DFC recognizes the output of our encryption tool (see below) and 
# decrypts encrypted passwords before using them. To create an
# encrypted password, execute the following command at a command
# prompt: 
#
#    java com.documentum.fc.tools.RegistryPasswordUtils <password>
#
# The utility sends the encrypted password to the standard output
#
dfc.bof.registry.username=
dfc.bof.registry.password=



# Minimum interval in seconds that DFC enforces between attempts to log in
# to the global registry. A high value can resist attempts to obtain
# unauthorized access to the global registry.
#
dfc.bof.registry.connect.attempt.interval=60


# Time in seconds that DFC waits between checks for consistency of its
# cache of services.
#
dfc.bof.cacheconsistency.interval=60


# Load services from the global registry into the local cache on startup.
# DFC uses cached information, even beyond the specified interval for 
# consistency checking, if the global registry becomes unavailable. 
# Because global registry information tends to be relatively static,
# this provides important protection against network or Content Server
# outages.
#
dfc.bof.registry.preload.enabled=True




# Diagnostic Options
# ==================

# You can use the following properties to modify DFC behavior to help you
# diagnose problems or potential problems. The values specified after the
# equal signs in the following samples are the values DFC assumes if you 
# do not set the corresponding property explicitly.
 
# Refer to the DFC Javadocs for DfLogger for basic information about the DFC 
# logging and tracing mechanism.  


# Run in diagnostic mode. Setting this to True directs DFC to catch and 
# log a variety of problems.  Between releases, the list of problems that 
# this mode addresses can change without notice.  The current list is as 
# follows:
# 
#  * Retrieving information from a released session. In diagnostic mode,
#    DFC eliminates race conditions (at a performance cost)
#  
#  * Failing to release a session (leading to session leaks). DFC 
#    discovers and logs unreleased sessions during garbage collection.
#  
#  * Failing to close a collection (leading to collection leaks) DFC 
#    discovers and logs unclosed collections during garbage collection.
#
dfc.resources.diagnostics.enabled=False 


# Turn on tracing. 
#
dfc.tracing.enabled=False


# Record information about method parameters while tracing.
#
dfc.tracing.recordParameters=True


# Record method return values while tracing.
#
dfc.tracing.recordReturnValue=True


# Use a nested trace output format. If you don't use this mode, a 
# method's entry and exit appear on separate lines with lines for calls 
# that the method makes appearing between the entry and exit lines.
#
#   Enter methodA
#   Enter methodB
#   Leave methodB
#   Leave methodA
#  
# When you do use the mode, a method's entry, exit, and return value 
# appear on a single line. Calls that the method makes appear on indented 
# lines below that line.
#
#   Run methodA, Return xxx 
#     Run methodB, Return yyy
#
dfc.tracing.compactMode=False


# Number of method call nesting levels to allow for while tracing.
# Valid values are integers greater than or equal to 0.
#
dfc.tracing.stackDepth=100


# Include DMCL tracing information while tracing. Otherwise, DFC sends
# DMCL trace information to the location specified in dmcl.ini 
#
dfc.tracing.combineDMCL=True




# XML Processing Options
# ======================

# DFC's XML processing is largely controlled by configuration files that
# define XML applications. The following properties provide additional
# options. 

# Refer to the XML Applications Development Guide for background
# information about DFC's XML processing.


# Specifies whether to encode the special characters in the XML attribute values
# while importing.
#
dfc.xml.encode_special_chars_in_attrs=True



# Record inline descendants in the registry.
#
dfc.recordInlineDescendants=True


# Conform strictly to the URI syntax within XML files during outbound 
# operations such as export and checkout.
#
dfc.strictURI=True




# Searching Options
# =================

# DFC enables you to use Enterprise Content Integration Services (ECIS)
# to search for information in Documentum and other repositories. Refer
# to the ECIS documentation for information about the following 
# properties. Values after the equal signs are default values.  


# Use ECIS. Setting this to True tells DFC to use ECIS in addition to
# Content Server's basic search facilities.
#
dfc.search.ecis.enable=False


# RMI registry host and port to connect to ECI Server. The ECIS
# Development Guide chapter on the application SDK explains the RMI
# registry.
#
dfc.search.ecis.host=
dfc.search.ecis.port=3005


# RMI Registry symbolic name associated with ECIS API.
#
dfc.search.ecis.name=xtrim.rmiApi


# Default credentials to connect to ECI server as guest.
#
dfc.search.ecis.login=guest
dfc.search.ecis.password=askonce


# Subdomain containing the source available to DFC.  By
# default, DFC uses the default domain of the standalone 
# ECI WEB client
#
dfc.search.ecis.adapter.domain=JSP


# The following properties control the way ECIS uses brokers, which are
# threads in the DFC process space that pull queries from a common
# queue and execute them.

# Number of broker threads supporting execution of the ECIS part 
# of a query. One broker supports the execution of the query for all 
# external sources selected for this query.
#
dfc.search.ecis.brokers=30


# Number of broker threads supporting execution of the Documentum 
# repository part of a query. One broker supports execution of the 
# query for each repository selected for this query.
#
dfc.search.docbase.brokers=20


# Use the Content Server full-text engine (for example, FAST). If you set 
# this to False, DFC replaces DQL full-text clauses by LIKE clauses on 
# the following attributes: object_name, title, subject.  
#
dfc.search.fulltext.enabled=True


# Time in milliseconds to wait for answer from ECIS server.
#
dfc.search.ecis.access.timeout=180000


# Maximum number of results to retrieve by a query search.
#
dfc.search.maxresults=1000

# Maximum number of results to retrieve per source by a query search.
#
dfc.search.maxresults_per_source=350


# Time in milliseconds between refreshes of the search source map cache.
#
dfc.search.sourcecache.timeout=1200000


# Time in milliseconds between refreshes of the cache of docbase formats.
#
dfc.search.formatcache.timeout=1200000


# Time in milliseconds between refreshes of the cache of type information.
#
dfc.search.typecache.timeout=1200000




# Storage Policy Options
# ======================

# The following properties tell DFC how to apply storage policy rules.  
# These properties do not change storage policies. They provide diagnostic 
# support and performance tradeoffs.  Values after the equal signs are 
# default values.  

# Refer to the Content Server Fundamentals manual for more information. 


# Use storage policies to determine the storage locations for new 
# content. Setting this to False disables the use of storage policies.
# Do this only for diagnostic purposes.  
#
dfc.storagepolicy.diagnostics.enabled=True


# Do not raise fatal errors if wrong attribute names appear in storage 
# policy rules.  Such errors result in exceptions that would cause the 
# save/checkin to fail.  Instead, log the errors to the log file.  
#
dfc.storagepolicy.ignore.rule.errors=False

 

# Maximum time interval in seconds during which the storage policy engine 
# can use cached information.  A value of zero means never use cached 
# information.  
#
dfc.storagepolicy.validation.interval=0




# Housekeeping
# ============

# These properties define the frequency of certain "housekeeping" 
# activities.  If you do not include these properties, DFC assumes the 
# values that appear after the equal signs in the samples below.
  
  
# Time in seconds that DFC waits between checks for updates to properties 
# files (dfc.properties, dbor.properties and so on).  Values less than or 
# equal to 0 tell DFC not to check for updates.  
#
dfc.config.timeout=1


# Time in days that DFC waits between unused resource cleanups. If, for 
# example, this has the default value of 7 days, DFC scans once per week 
# for resources that are no longer in use. If it finds any, it frees them.  
#
dfc.housekeeping.cleanup.interval=7




# Registry Emulation
# ==================

# On Windows clients, DFC uses the system registry to keep track of files 
# checked out or exported to the client machine.  On Unix systems, DFC 
# keeps this information in a file on the file system.  DFC sets this mode 
# automatically, but you can use the following properties to specify using 
# the file method on Windows systems or to specify the file location on 
# any system. DO NOT use file mode with Documentum Desktop. 


# Registry mode: registry or file.
#
dfc.registry.mode=file


# Absolute path to the registry file (if the registry mode is file).
#
dfc.registry.file=${dfc.user.dir}/documentum.ini




# Miscellaneous Properties
# ========================

# Filename extension to use for mac resource files.
#
dfc.appledouble.resource.file.extension=adp




# Client Machine Directory Locations
# ==================================
  
# DFC uses directories on the client machine. You can specify values for 
# these directories by setting any of the following properties. If you do 
# not specify these properties, DFC assumes the values that appear after 
# the equal signs in the samples below. The installer sets these values 
# based on information you provide, so there is usually no need to modify
# them.

# Refer to the DFC Installation Guide for more information about client
# machine directory locations.  
  
  
# Absolute path to the DFC data directory (normally the parent of the config 
# directory).  The installer assumes C:/Documentum for Windows systems and 
# $(user.home) for Unix systems.   
#
dfc.data.dir=C:/Documentum
 

# Absolute path to the Documentum user directory. This is normally the root 
# of a hierarchy of client directories.  
#
dfc.user.dir=${dfc.data.dir}


# Absolute path to the Documentum checkout directory, in which DFC stores 
# content files corresponding to checked out objects.  
#
dfc.checkout.dir=${dfc.user.dir}/checkout


# Absolute path to the Documentum export directory, in which DFC stores 
# content files of objects transferred to the client machine but not 
# checked out.
#
dfc.export.dir=${dfc.user.dir}/export


# Absolute path to the Documentum class cache directory.
#
dfc.cache.dir=${dfc.user.dir}/cache


#Session Properties
#===================

#DFC session timeout value in seconds.
#The specified timeout value takes effect only if DMCL pooling is turned off.

dfc.session.pool.expiration_interval= 5*60




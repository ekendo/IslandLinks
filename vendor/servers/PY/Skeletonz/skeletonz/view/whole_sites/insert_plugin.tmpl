#def header_data
<style>
  .table {
    font-size: 11px;
    display: block;
    margin-top: 8px;
    border-collapse: collapse;
  }

  .list {
    float: left;
    margin: 0;
    width: 160px;
    vertical-align: top;
  }

  .insert {
    position: absolute;
    left: 215px;
    width: 385px;
    vertical-align: top;
    padding-bottom: 15px;
  }

  input.text {
    width: 200px;
  }

  .ta_insert {
    width: 300px;
    height: 150px;
  }

  .ta_syn {
    width: 300px;
    height: 50px;
  }

  ul {
    padding: 0;
    margin: 0;
  }

  li {
    list-style: none;
    padding: 5px;
    border: 1px solid #ccc;
  }

  li.normal {
    cursor: pointer;
    background-color: #DCE8F1;
  }

  dd.under {
    font-size: 10px;
    color: #555;
  }
  
  dt {
    padding-bottom: 4px;
    font-weight: bold;
  }

  li.current {
    cursor: default;
    background-color: #fff;
    border-right: none;
  }

  .edit_area {
    padding: 0 0 10px 0;
  }

  #frm_syntax_elm {
    color: #555;
  }
</style>
<script>
var syntax_elm = null;

/**
  Templates
  **/
var tmpl_arg_edit = [
  '<div class="edit_area">',
    '<dl>',
      '%(form_elms)',
      '<dt>Syntax to insert</dt>',
        '<dd><textarea class="ta_syn" onkeyup="return false" onkeydown="return false" id="frm_syntax_elm"></textarea></dd>',
      '<dt><span class="CMS_link" onclick="SyntaxMan._insertSyntax()"><img src="static_core/images/add.png" /> Insert syntax</span></dt>',
    '</dl>',
  '</div>'];
tmpl_arg_edit = AJS.join("", tmpl_arg_edit);

var tmpl_arg = "<dd>%(elm_edit)</dd>";
var tmpl_input_area = [
  '%(name): <br />',
  '%(input_form)',
  '<span onmouseover="AmiTooltip.show(this, null, \'%(help)\')" onmouseout="AmiTooltip.hide()"><img src="static_core/images/help.png" /></span>'
]
tmpl_input_area = AJS.join("", tmpl_input_area);

var SyntaxMan = {
  populateArea: function(cont, syntax) {
    SyntaxMan.syntax = syntax;

    SyntaxMan.handler = syntax['handler'];

    var req_args = syntax['required_arguments'];
    var opt_args = syntax['optional_arguments'];

    SyntaxMan.req_args = req_args;
    SyntaxMan.opt_args = opt_args;

    var form_elms = [];
    var name, form;

    //Required
    if(AJS.keys(req_args).length > 0) {
      form_elms.push("<dt>Required arguments:</dt>");
      //Be sure to insert ident first
      if(req_args['ident']) {
        elm_edit = SyntaxMan._getInputElm('ident', req_args['ident']);
        form_elms.push(AJS.RND(tmpl_arg, {'elm_edit': elm_edit}));
      }

      for(key in req_args) {
        if(key != 'ident') {
          elm_edit = SyntaxMan._getInputElm(key, req_args[key]);
          form_elms.push(AJS.RND(tmpl_arg, {'elm_edit': elm_edit}));
        }
      }
    }

    //Optional
    if(AJS.keys(opt_args).length > 0) {
      form_elms.push("<dt>Optional arguments:</dt>");
      for(key in opt_args) {
        elm_edit = SyntaxMan._getInputElm(key, opt_args[key]);
        form_elms.push(AJS.RND(tmpl_arg, {'elm_edit': elm_edit}));
      }
    }

    var args = {'form_elms': AJS.join('', form_elms)};
    AJS.setHTML(cont, AJS.RND(tmpl_arg_edit, args));

    SyntaxMan._updateSyntax();
  },

  keyPressing: function() {
    SyntaxMan._updateSyntax();
  },

  _getFieldVal: function(id) {
    return AJS.\$('frm_'+id).value;
  },

  _getField: function(id) {
    return AJS.\$('frm_'+id);
  },

  _insertSyntax: function() {
    var syntax_elm = AJS.\$('frm_syntax_elm');

    for(key in this.req_args) {
      if(SyntaxMan._getFieldVal(key) == '') {
        alert('Argument "' + key + '" is required for this plugin!');
        return ;
      }
    }
    var textarea = GB_P.EC_Editor.getCurrentTextfield();
    var itext = syntax_elm.value;
    GB_P.EC_Editor.restorePosition();
    AmiFormat.insertAtCursor(textarea, itext); 
    GB_P.GB_hide();
  },

  _updateSyntax: function() {
    var syntax_elm = AJS.\$('frm_syntax_elm');
    syntax_elm.value = "[" + SyntaxMan.handler;

    //Ident
    if(SyntaxMan.req_args['ident']) {
      syntax_elm.value += "=" + SyntaxMan._getFieldVal('ident');
    }

    var get_val = function(key) {
      return key + "=" + SyntaxMan._getFieldVal(key);
    };

    for(key in SyntaxMan.req_args) {
      if(!AJS.isIn(key, ["ident", "data"])) {
        syntax_elm.value += ", " + get_val(key);
      }
    }

    for(key in SyntaxMan.opt_args) {
      var input = SyntaxMan._getField(key);
      var val = input.value;
      if(input.type == "checkbox" && input.checked) {
        syntax_elm.value += ", " + key;
      }
      else if(input.type != "checkbox" && val != '') {
        syntax_elm.value += ", " + get_val(key);
      }
    }

    syntax_elm.value += "]";

    if(SyntaxMan.isTextTag(SyntaxMan.syntax)) {
      syntax_elm.value += "\n";
      syntax_elm.value += SyntaxMan._getFieldVal('data');
      syntax_elm.value += "\n";
      syntax_elm.value += "[/" + SyntaxMan.handler + "]";
    }
    return true;
  },

  _getInputElm: function(name, expl) {
    var type = 'value';
    var defau = '';
    var help = expl['help'] || expl;

    if(typeof(expl) != "string") {
      type = expl['type'] || 'value';
      defau = expl['default'] || '';
    }

    var input_form;
    if(type == 'text') {
      input_form = '<textarea id="%(id)" class="ta_insert">'+defau+'</textarea>';
    }
    else if(type == 'option') {
      input_form = '<input type="checkbox" onclick="SyntaxMan._updateSyntax()"  id="%(id)" value="'+defau+'" />';
    }
    else if(type == 'list') {
      input_form = '<select id="%(id)" onchange="SyntaxMan._updateSyntax()">';
      var selected = '';
      AJS.map(expl['dict'], function(lang){
        if(lang[0] == defau)
          selected = ' selected="selected"';
        else
          selected = '';
        input_form += '<option value="' + lang[1] + '"' + selected + '>'+ lang[0] +'</option>';
      });
      input_form += '</select>';
    }
    else {
      input_form = '<input type="text" id="%(id)" autocomplete="off" value="'+defau+'" />';
    }
    input_form = AJS.RND(input_form, {'id': 'frm_'+name});
    return AJS.RND(tmpl_input_area, {'name': name, 'help': help, 'input_form': input_form});

  },

  isTextTag: function(syntax) {
    var req_args = syntax['required_arguments'];
    if(req_args['data'])
      return true;
    return false;
  }
}

AJS.AEV(document, 'keyup', SyntaxMan.keyPressing);

var PluginMan = {
  init: function() {
    this.elm_list = [];
    this.current_elm = null;
  },

  insertLIElement: function(name, description, syntax) {
    var elm = AJS.LI({'class': 'normal'}, name);

    elm.name = name;
    elm.description = description;
    elm.syntax = syntax;

    this.elm_list.push(elm);
    AJS.AEV(elm, "click", AJS.bind(function(e) {
      if(elm.className != "current")
        this.selectElement(elm);
    }, this));
    return elm;
  },

  _showTabs: function(cont, elm) {
    var result = AJS.DIV();
    this.current_tab = null;

    var dl = AJS.DL();
    AJS.ACN(result, dl);
    AJS.ACN(dl, AJS.DT('Description'));
    AJS.ACN(dl, AJS.setHTML(AJS.DD(), elm.description));

    //Tabs
    var tabs = AJS.DIV({'class': 'Tabs', 'style': 'padding-top: 10px;'});
    var syntax, last_elm; 
    last_syntax = elm.syntax[elm.syntax.length-1];

    for(var i=0; i < elm.syntax.length; i++) {
      syntax = elm.syntax[i];

      var a = AJS.A({'href': '#'});
      a.syntax = syntax;

      //Check out if it's a text tag
      if(SyntaxMan.isTextTag(syntax)) {
        AJS.ACN(a, "[" + syntax['handler'] + "]" + "..." + "[/" + syntax['handler'] + "]");
      }
      else {
        AJS.ACN(a, "[" + syntax['handler'] + "...]");
      }
      AJS.ACN(tabs, a);

      a.onclick = AJS.bind(function(e) {
        var elm = AJS.getEventElm(e);
        Indicator.append(elm);
        AJS.callLater(AJS.bind(function() { 
          SyntaxMan.populateArea($('tab_insert'), elm.syntax);

          if(this.current_tab) {
            this.current_tab.className = "";
          }
          elm.className = "current";
          this.current_tab = elm;
          Indicator.remove(elm);
        }, this), 50);

        return false;
      }, this);

      if(i == 0) {
        a.className = 'current';
        this.current_tab = a;
      }

      if(syntax != last_syntax)
        AJS.ACN(tabs, " | ");
    }
    AJS.ACN(tabs, IMG({'src': 'static_core/images/blank.gif', 'style': 'height: 16px; width: 2px;'}));
    AJS.ACN(result, tabs);

    //Insert area
    var tab_ins = AJS.DIV({'id': 'tab_insert'});
    AJS.RCN(cont, result, tab_ins);

    //Select the first 
    SyntaxMan.populateArea(tab_ins, elm.syntax[0]);
  },

  selectElement: function(elm) {
    elm.className = "current";
    this._showTabs(AJS.$('insert'), elm);

    //Reset the old
    if(this.current_elm)
      this.current_elm.className = "normal";
    this.current_elm = elm;
  },

  selectFirst: function() {
    if(this.elm_list.length > 0)
      this.selectElement(this.elm_list[0]);

  }
}
PluginMan.init();
</script>
#end def
#silent $template.getHeader().appendScriptData($header_data)
$template.getHeader().renderText()
<div id="container">
  <div id="content">

    <div class="section">
      <img src="static_core/amibar/component_add.png" /> Insert plugin syntax
    </div>

    <div class="table">
      <div class="list">
        <ul>
          #for $plugin in $plugins
            #if $plugin['syntax'] != None
            <script>
              AJS.DI(PluginMan.insertLIElement($plugin['name'], $plugin['description'],  $plugin['syntax']));
            </script>
            #end if
          #end for
        </ul>
      </div>

      <div class="Insert" id="insert">
      </div>
    </div>

    <script>
      PluginMan.selectFirst();
    </script>

  </div>
</div>
$template.getFooter().renderText()
